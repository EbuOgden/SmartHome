/**
 * Copyright IBM Corporation 2016
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

import Foundation
import RestKit

/** A custom configuration for the environment. */
public struct TestConfigurationDetails: JSONDecodable {
    
    /// Status of enriching the file with the test configurations.
    public let status: String?
    
    /// The number of enriched field units.
    public let enrichedFieldUnits: Int?

    /// The original media type of the file used to test the configuration.
    public let originalMediaType: String?
    
    /// Snapshot of how the document was processed with the configuration.
    public let snapshots: [Snapshot]?
    
    /// Any notices generated by the ingestion process.
    public let notices: [Notice]?

    /// Used internally to initialize a `TestConfigurationDetails` model from JSON.
    public init(json: JSON) throws {
        status = try? json.getString(at: "status")
        enrichedFieldUnits = try? json.getInt(at: "enriched_field_units")
        originalMediaType = try? json.getString(at: "original_media_type")
        snapshots = try? json.decodedArray(at: "snapshots", type: Snapshot.self)
        notices = try? json.decodedArray(at: "notices", type: Notice.self)
    }

    /** A snapshot of how the document was processed. */
    public struct Snapshot: JSONDecodable {
        
        /// Step of processing the document.
        public let step: String?
        
        /// The raw JSON object used to construct this model.
        public let snapshot: [String: Any]
        
        /// Used internally to initialize a 'Snapshot' model from JSON.
        public init(json: JSON) throws {
            step = try? json.getString(at: "step")
            self.snapshot = try json.getDictionaryObject(at: "snapshot")
        }
        
        /// Used internally to serialize a 'Snapshot' model to json.
        public func toJSONObject() -> Any {
            return snapshot
        }
    }
}
